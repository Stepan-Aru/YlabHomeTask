version: '3.8'
services:
  app:
    build: .
    restart: always
    ports:
      - "8000:8000"
    env_file: .env.example
    command: "uvicorn app.main:app --host 0.0.0.0 --port 8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      celery_worker:
        condition: service_started
    networks:
      - resto_network
    volumes:
      - data_reports:/src/data_reports

  postgres:
    image: postgres:15.1-alpine
    restart: always
    env_file: .env.example
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - resto_network
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:latest
    restart: always
    env_file: .env.example
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - resto_network

  rebitmq:
    image: rabbitmq:alpine
    restart: always
    env_file: .env.example
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - resto_network

  celery_worker:
    build: .
    restart: always
    env_file: .env.example
    command: celery -A app.celery_worker.tasks worker --loglevel=INFO
    depends_on:
      rebitmq:
        condition: service_healthy
    networks:
      - resto_network
    volumes:
      - data_reports:/src/data_reports

  flower:
    build: .
    restart: always
    env_file: .env.example
    command: celery -A app.celery_worker.tasks flower --port=5555
    ports:
      - 5555:5555
    depends_on:
      rebitmq:
        condition: service_healthy
    networks:
      - resto_network


volumes:
  pgdata:
  data_reports:

networks:
  resto_network:
    name: resto_network
